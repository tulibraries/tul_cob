version: 2.1

orbs:
  ruby: circleci/ruby@2.0.0
  coveralls: coveralls/coveralls@2.2.0

workflows:
  version: 2
  run_tests:
    jobs:
      - run_tests
  qa_deploy:
   jobs:
     - qa_deploy:
         filters:
           branches:
             only:
               - main
  stage_deploy:
    jobs:
      - stage_deploy:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
  prod_deploy:
    jobs:
      - request-prod-deploy:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - prod_deploy:
          requires:
            - request-prod-deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/

jobs:
  run_tests:
    docker:
      - image: cimg/ruby:3.1-node
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout

      - restore_cache:
          keys:
            - gem-cache-v8-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-v8-{{ arch }}-{{ .Branch }}
            - gem-cache-v8-{{ arch }}
            - yarn-cache-v8-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}

      - setup_remote_docker:
          docker_layer_caching: false
          version: 20.10.11

      - run: if [ -e /var/run/docker.sock ]; then sudo chown circleci:circleci /var/run/docker.sock; fi

      - run:
          name: Build app
          command: make up

      - run:
          name: Run bundler on the app container
          command: make ci-bundle-install

      - run:
          name: Run yarn install on the app container
          command: make ci-yarn-install

      - run:
          name: Add headless browser testing dependencies
          command: make add-testing-deps

      - run:
          name: Copy the vendor/bundle from the container to local
          command: make ci-copy-bundle-files-to-local

      - run:
          name: Copy the node_modules from the container to local
          command: make ci-copy-node-modules-to-local

      - save_cache:
          key: gem-cache-v8-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
              - vendor/bundle

      - save_cache:
          key: yarn-cache-v8-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
              - node_modules

      - run:
          name: Set up DB
          command: make ci-setup-db

      - run:
          name: Run linter
          command: make lint

      - run:
          name: Run ruby tests
          command: |
            make test
            docker cp tul_cob-app-1:/app/coverage/lcov/app.lcov ./app.lcov

      - run:
          name: Run javascript tests
          command: make test-js

      - coveralls/upload:
          path_to_lcov: ./app.lcov

  qa_deploy:
    docker:
      - image: cimg/python:3.9.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f7:95:df:23:81:5e:03:3e:73:0f:de:6f:1d:47:be:96"
      - run:
          command: bash .circleci/deploy-qa.sh

  stage_deploy:
    docker:
      - image: cimg/python:3.9.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f7:95:df:23:81:5e:03:3e:73:0f:de:6f:1d:47:be:96"
      - run:
          command: bash .circleci/deploy-stage.sh

  prod_deploy:
    docker:
      - image: cimg/python:3.9.10
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          PIPENV_VENV_IN_PROJECT: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f7:95:df:23:81:5e:03:3e:73:0f:de:6f:1d:47:be:96"
      - run:
          command: bash .circleci/deploy-prod.sh

      - run:
          name: Set Production Airflow Variable "CATALOG_PRODUCTION_SOLR_COLLECTION" to match value in .env
          command: bash .circleci/update-airflow.sh
